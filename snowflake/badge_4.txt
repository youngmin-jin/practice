-- ############# create greeting #################
create or replace external function util_db.public.greeting(
      email varchar
    , firstname varchar
    , middlename varchar
    , lastname varchar)
returns variant
api_integration = dora_api_integration
context_headers = (current_timestamp,current_account, current_statement)
as 'https://awy6hshxy4.execute-api.us-west-2.amazonaws.com/dev/edu_dora/greeting'
;

select util_db.public.greeting('jin.youngmin.5254@members.co.jp', 'Youngmin', '', 'Jin');


-- ############# access to S3 ##################
list @ZENAS_ATHLEISURE_DB.PRODUCTS.UNI_KLAUS_CLOTHING;
list @ZENAS_ATHLEISURE_DB.PRODUCTS.UNI_KLAUS_ZMD;
list @ZENAS_ATHLEISURE_DB.PRODUCTS.UNI_KLAUS_SNEAKERS;

-- grader
select GRADER(step, (actual = expected), actual, expected, description) as graded_results from
(
 SELECT
 'DLKW01' as step
  ,( select count(*)  
      from ZENAS_ATHLEISURE_DB.INFORMATION_SCHEMA.STAGES 
      where stage_url ilike ('%/clothing%')
      or stage_url ilike ('%/zenas_metadata%')
      or stage_url like ('%/sneakers%')
   ) as actual
, 3 as expected
, 'Stages for Klaus bucket look good' as description
); 


-- ############### check s3 data with file format ################
-- check only one data from s3
SELECT $1
FROM @ZENAS_ATHLEISURE_DB.PRODUCTS.UNI_KLAUS_ZMD/product_coordination_suggestions.txt;

-- create a file format with record_delimiter
CREATE OR REPLACE FILE FORMAT ZENAS_ATHLEISURE_DB.PRODUCTS.zmd_file_format_1
    RECORD_DELIMITER = '^';

SELECT $1
FROM @ZENAS_ATHLEISURE_DB.PRODUCTS.UNI_KLAUS_ZMD/product_coordination_suggestions.txt
(file_format => ZENAS_ATHLEISURE_DB.PRODUCTS.zmd_file_format_1);


-- create a file format with field_delimiter
CREATE OR REPLACE FILE FORMAT ZENAS_ATHLEISURE_DB.PRODUCTS.zmd_file_format_2
    FIELD_DELIMITER = '^';

SELECT $1, $2, $3
FROM @ZENAS_ATHLEISURE_DB.PRODUCTS.UNI_KLAUS_ZMD/product_coordination_suggestions.txt
(file_format => ZENAS_ATHLEISURE_DB.PRODUCTS.zmd_file_format_2);


-- ################ create views ###################
-- product_coordination_suggestions.txt
CREATE OR REPLACE FILE FORMAT ZENAS_ATHLEISURE_DB.PRODUCTS.zmd_file_format_3
    FIELD_DELIMITER = '='
    RECORD_DELIMITER = '^';

SELECT $1, $2
FROM @ZENAS_ATHLEISURE_DB.PRODUCTS.UNI_KLAUS_ZMD/product_coordination_suggestions.txt
(file_format => ZENAS_ATHLEISURE_DB.PRODUCTS.zmd_file_format_3);

CREATE OR REPLACE VIEW zenas_athleisure_db.products.SWEATBAND_COORDINATION AS
    SELECT $1 AS PRODUCT_CODE
        , $2 AS HAS_MATCHING_SWEATSUIT
    FROM @ZENAS_ATHLEISURE_DB.PRODUCTS.UNI_KLAUS_ZMD/product_coordination_suggestions.txt
    (file_format => ZENAS_ATHLEISURE_DB.PRODUCTS.zmd_file_format_3);

SELECT *
FROM zenas_athleisure_db.products.SWEATBAND_COORDINATION;


-- sweatsuit_sizes.txt
CREATE OR REPLACE FILE FORMAT ZENAS_ATHLEISURE_DB.PRODUCTS.zmd_file_format_1
    RECORD_DELIMITER = ';'
    TRIM_SPACE = TRUE;

SELECT REPLACE($1, chr(13)||chr(10)) AS SIZES_AVAILABLE
FROM @ZENAS_ATHLEISURE_DB.PRODUCTS.UNI_KLAUS_ZMD/sweatsuit_sizes.txt
(file_format => ZENAS_ATHLEISURE_DB.PRODUCTS.zmd_file_format_1)
WHERE SIZES_AVAILABLE <> '';

-- create a view 
CREATE OR REPLACE VIEW zenas_athleisure_db.products.sweatsuit_sizes as 
    SELECT REPLACE($1, chr(13)||chr(10)) AS SIZES_AVAILABLE
    FROM @ZENAS_ATHLEISURE_DB.PRODUCTS.UNI_KLAUS_ZMD/sweatsuit_sizes.txt
    (file_format => ZENAS_ATHLEISURE_DB.PRODUCTS.zmd_file_format_1)
    WHERE SIZES_AVAILABLE <> '';

SELECT *
FROM zenas_athleisure_db.products.sweatsuit_sizes;


-- swt_product_line.txt
CREATE OR REPLACE FILE FORMAT ZENAS_ATHLEISURE_DB.PRODUCTS.zmd_file_format_2
    FIELD_DELIMITER = '|'
    RECORD_DELIMITER = ';'
    TRIM_SPACE = TRUE;

SELECT REPLACE($1, chr(13)||chr(10)), $2, $3
FROM @ZENAS_ATHLEISURE_DB.PRODUCTS.UNI_KLAUS_ZMD/swt_product_line.txt
(file_format => ZENAS_ATHLEISURE_DB.PRODUCTS.zmd_file_format_2);

CREATE OR REPLACE VIEW zenas_athleisure_db.products.SWEATBAND_PRODUCT_LINE AS
    SELECT REPLACE($1, chr(13)||chr(10)) AS PRODUCT_CODE
        , $2 AS HEADBAND_DESCRIPTION
        , $3 AS WRISTBAND_DESCRIPTION
    FROM @ZENAS_ATHLEISURE_DB.PRODUCTS.UNI_KLAUS_ZMD/swt_product_line.txt
    (file_format => ZENAS_ATHLEISURE_DB.PRODUCTS.zmd_file_format_2);

SELECT $1, $2
FROM @ZENAS_ATHLEISURE_DB.PRODUCTS.UNI_KLAUS_ZMD/swt_product_line.txt;
    
SELECT *
FROM zenas_athleisure_db.products.SWEATBAND_PRODUCT_LINE;


-- grader
select GRADER(step, (actual = expected), actual, expected, description) as graded_results from
(
 SELECT
   'DLKW02' as step
   ,( select sum(tally) from
        (select count(*) as tally
        from ZENAS_ATHLEISURE_DB.PRODUCTS.SWEATBAND_PRODUCT_LINE
        where length(product_code) > 7 
        union
        select count(*) as tally
        from ZENAS_ATHLEISURE_DB.PRODUCTS.SWEATSUIT_SIZES
        where LEFT(sizes_available,2) = char(13)||char(10))     
     ) as actual
   ,0 as expected
   ,'Leave data where it lands.' as description
); 


-- ############## access to unstructured data ################
SELECT metadata$filename AS EACH_METADATA
        , COUNT(*) AS NUMBER_OF_ROWS
FROM @ZENAS_ATHLEISURE_DB.PRODUCTS.UNI_KLAUS_CLOTHING
GROUP BY EACH_METADATA;

-- using Directory Tables
SELECT *
FROM DIRECTORY(@ZENAS_ATHLEISURE_DB.PRODUCTS.UNI_KLAUS_CLOTHING);

ALTER STAGE ZENAS_ATHLEISURE_DB.PRODUCTS.UNI_KLAUS_CLOTHING
SET DIRECTORY = (ENABLE = TRUE);

ALTER STAGE ZENAS_ATHLEISURE_DB.PRODUCTS.UNI_KLAUS_CLOTHING REFRESH;


--testing UPPER and REPLACE functions on directory table
select UPPER(RELATIVE_PATH) as uppercase_filename
, REPLACE(uppercase_filename,'/') as no_slash_filename
, REPLACE(no_slash_filename,'_',' ') as no_underscores_filename
, REPLACE(no_underscores_filename,'.PNG') as just_words_filename
from directory(@ZENAS_ATHLEISURE_DB.PRODUCTS.UNI_KLAUS_CLOTHING);



-- ################### JOIN ####################
--create an internal table for some sweat suit info
create or replace TABLE ZENAS_ATHLEISURE_DB.PRODUCTS.SWEATSUITS (
	COLOR_OR_STYLE VARCHAR(25),
	DIRECT_URL VARCHAR(200),
	PRICE NUMBER(5,2)
);

--fill the new table with some data
insert into  ZENAS_ATHLEISURE_DB.PRODUCTS.SWEATSUITS 
          (COLOR_OR_STYLE, DIRECT_URL, PRICE)
values
('90s', 'https://uni-klaus.s3.us-west-2.amazonaws.com/clothing/90s_tracksuit.png',500)
,('Burgundy', 'https://uni-klaus.s3.us-west-2.amazonaws.com/clothing/burgundy_sweatsuit.png',65)
,('Charcoal Grey', 'https://uni-klaus.s3.us-west-2.amazonaws.com/clothing/charcoal_grey_sweatsuit.png',65)
,('Forest Green', 'https://uni-klaus.s3.us-west-2.amazonaws.com/clothing/forest_green_sweatsuit.png',65)
,('Navy Blue', 'https://uni-klaus.s3.us-west-2.amazonaws.com/clothing/navy_blue_sweatsuit.png',65)
,('Orange', 'https://uni-klaus.s3.us-west-2.amazonaws.com/clothing/orange_sweatsuit.png',65)
,('Pink', 'https://uni-klaus.s3.us-west-2.amazonaws.com/clothing/pink_sweatsuit.png',65)
,('Purple', 'https://uni-klaus.s3.us-west-2.amazonaws.com/clothing/purple_sweatsuit.png',65)
,('Red', 'https://uni-klaus.s3.us-west-2.amazonaws.com/clothing/red_sweatsuit.png',65)
,('Royal Blue',	'https://uni-klaus.s3.us-west-2.amazonaws.com/clothing/royal_blue_sweatsuit.png',65)
,('Yellow', 'https://uni-klaus.s3.us-west-2.amazonaws.com/clothing/yellow_sweatsuit.png',65);

SELECT LOWER(COLOR_OR_STYLE), *
FROM ZENAS_ATHLEISURE_DB.PRODUCTS.SWEATSUITS;


-- join
CREATE OR REPLACE VIEW ZENAS_ATHLEISURE_DB.PRODUCTS.TEMP_UNI_KLAUS_CLOTHING AS
    SELECT TRIM(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(RELATIVE_PATH,'.png'),'_',' '),'/'),'sweatsuit'),chr(13)||chr(11)),'tracksuit')) AS NAME
        , LAST_MODIFIED 
    FROM DIRECTORY(@ZENAS_ATHLEISURE_DB.PRODUCTS.UNI_KLAUS_CLOTHING);

SELECT *
FROM ZENAS_ATHLEISURE_DB.PRODUCTS.TEMP_UNI_KLAUS_CLOTHING;
    
SELECT S.COLOR_OR_STYLE
        , S.DIRECT_URL
        , S.PRICE
        , T.LAST_MODIFIED 
FROM ZENAS_ATHLEISURE_DB.PRODUCTS.SWEATSUITS AS S 
    JOIN ZENAS_ATHLEISURE_DB.PRODUCTS.TEMP_UNI_KLAUS_CLOTHING AS T ON LOWER(S.COLOR_OR_STYLE) = T.NAME;

    
-- or
CREATE OR REPLACE VIEW ZENAS_ATHLEISURE_DB.PRODUCTS.CATALOG AS
    select color_or_style
    , direct_url
    , price
    , size as image_size
    , last_modified as image_last_modified
    , sizes_available
    from ZENAS_ATHLEISURE_DB.PRODUCTS.sweatsuits 
    join directory(@ZENAS_ATHLEISURE_DB.PRODUCTS.UNI_KLAUS_CLOTHING) 
        on relative_path = SUBSTR(direct_url,54,50)
        cross join ZENAS_ATHLEISURE_DB.PRODUCTS.sweatsuit_sizes;


-- grader
select GRADER(step, (actual = expected), actual, expected, description) as graded_results from
(
 SELECT
 'DLKW03' as step
 ,( select count(*) from ZENAS_ATHLEISURE_DB.PRODUCTS.CATALOG) as actual
 ,198 as expected
 ,'Cross-joined view exists' as description
); 


-- add a table
-- Add a table to map the sweat suits to the sweat band sets
create or replace table ZENAS_ATHLEISURE_DB.PRODUCTS.UPSELL_MAPPING
(
SWEATSUIT_COLOR_OR_STYLE varchar(25)
,UPSELL_PRODUCT_CODE varchar(10)
);

--populate the upsell table
insert into ZENAS_ATHLEISURE_DB.PRODUCTS.UPSELL_MAPPING
(
SWEATSUIT_COLOR_OR_STYLE
,UPSELL_PRODUCT_CODE 
)
VALUES
('Charcoal Grey','SWT_GRY')
,('Forest Green','SWT_FGN')
,('Orange','SWT_ORG')
,('Pink', 'SWT_PNK')
,('Red','SWT_RED')
,('Yellow', 'SWT_YLW');


-- Zena needs a single view she can query for her website prototype
create view catalog_for_website as 
    select color_or_style
        ,price
        ,direct_url
        ,size_list
        ,coalesce('BONUS: ' ||  headband_description || ' & ' || wristband_description, 'Consider White, Black or Grey Sweat Accessories')  as upsell_product_desc
    from
    (   select color_or_style, price, direct_url, image_last_modified,image_size
        ,listagg(sizes_available, ' | ') within group (order by sizes_available) as size_list
        from ZENAS_ATHLEISURE_DB.PRODUCTS.catalog
        group by color_or_style, price, direct_url, image_last_modified, image_size
    ) c
    left join ZENAS_ATHLEISURE_DB.PRODUCTS.upsell_mapping u
        on u.sweatsuit_color_or_style = c.color_or_style
    left join ZENAS_ATHLEISURE_DB.PRODUCTS.sweatband_coordination sc
        on sc.product_code = u.upsell_product_code
    left join ZENAS_ATHLEISURE_DB.PRODUCTS.sweatband_product_line spl
        on spl.product_code = sc.product_code
    where price < 200 -- high priced items like vintage sweatsuits aren't a good fit for this website
    and image_size < 1000000; -- large images need to be processed to a smaller size


SELECT *
FROM catalog_for_website;


-- grader
select GRADER(step, (actual = expected), actual, expected, description) as graded_results from
(
SELECT
'DLKW04' as step
 ,( select count(*) 
  from zenas_athleisure_db.products.catalog_for_website 
  where upsell_product_desc like '%NUS:%') as actual
 ,6 as expected
 ,'Relentlessly resourceful' as description
); 


-- ################ geo data #####################
-- https://clydedacruz.github.io/openstreetmap-wkt-playground/
LIST @TRAILS_GEOJSON;
LIST @TRAILS_PARQUET;

SELECT $1, $2
FROM @TRAILS_GEOJSON/Bear_Creek_Trail.geojson;

-- create file formats
CREATE OR REPLACE FILE FORMAT FF_JSON
  TYPE = 'JSON' 
;

SELECT $1
FROM @TRAILS_GEOJSON
(FILE_FORMAT => FF_JSON);


CREATE OR REPLACE FILE FORMAT FF_PARQUET
  TYPE = 'PARQUET' 
;

SELECT $1
FROM @TRAILS_PARQUET
(FILE_FORMAT => FF_PARQUET);


-- grader
select GRADER(step, (actual = expected), actual, expected, description) as graded_results from
(
SELECT
'DLKW05' as step
 ,( select sum(tally)
   from
     (select count(*) as tally
      from mels_smoothie_challenge_db.information_schema.stages 
      union all
      select count(*) as tally
      from mels_smoothie_challenge_db.information_schema.file_formats)) as actual
 ,4 as expected
 ,'Camila\'s Trail Data is Ready to Query' as description
 ); 


-- ############## geo_parquet ################
-- separate the values/ filp latitude and longitude/ decimal change
CREATE OR REPLACE VIEW CHERRY_CREEK_TRAIL AS
    SELECT $1:sequence_1 AS POINT_ID
            , $1:trail_name::VARCHAR AS TRAIL_NAME
            , $1:latitude::NUMBER(11,8) AS LNG
            , $1:longitude::NUMBER(11,8) AS LAT
            , LNG || ' ' || LAT AS COORD_PAIR
    FROM @TRAILS_PARQUET
    (FILE_FORMAT => FF_PARQUET)
    ORDER BY POINT_ID
;

SELECT 'LINESTRING(' || LISTAGG(COORD_PAIR,',') WITHIN GROUP (ORDER BY POINT_ID) || ')' AS MY_LINESTRING
FROM CHERRY_CREEK_TRAIL
GROUP BY TRAIL_NAME;

SELECT 'LINESTRING('|| listagg(coord_pair, ',') within group (order by point_id) ||')' AS MY_LINESTRING
        , TO_GEOGRAPHY(MY_LINESTRING) AS USE_TO_GEOGRAPHY
        -- to calculate the length of geographical points
        , ST_LENGTH(TO_GEOGRAPHY(MY_LINESTRING)) AS LENGTH_OF_TRAIL
FROM CHERRY_CREEK_TRAIL
GROUP BY TRAIL_NAME;



-- ############## geo_json ################
-- https://geojson.io/#map=2/0/20 
-- -> possible to draw lines using json
CREATE OR REPLACE VIEW DENVER_AREA_TRAILS AS
    SELECT $1:features[0]:properties:Name::STRING AS FEATURE_NAME
            , $1:features[0]:geometry:coordinates::STRING AS FEATURE_COORDINATES
            , $1:features[0]:geometry::STRING AS GEOMETRY
            , ST_LENGTH(TO_GEOGRAPHY(GEOMETRY)) AS TRAIL_LENGTH
            , $1:features[0]:properties::STRING AS FEATURE_PROPERTIES
            , $1:crs:properties:name::STRING AS SPECS
            , $1 AS WHOLE_OBJECT
    FROM @TRAILS_GEOJSON
    (FILE_FORMAT => FF_JSON);

SELECT *
FROM DENVER_AREA_TRAILS;
    
SELECT FEATURE_NAME
        , ST_LENGTH(TO_GEOGRAPHY(GEOMETRY)) AS TRAIL_LENGTH
FROM DENVER_AREA_TRAILS;


-- grader
select GRADER(step, (actual = expected), actual, expected, description) as graded_results from
(
SELECT
'DLKW06' as step
 ,( select count(*) as tally
      from mels_smoothie_challenge_db.information_schema.views 
      where table_name in ('CHERRY_CREEK_TRAIL','DENVER_AREA_TRAILS')) as actual
 ,2 as expected
 ,'Mel\'s views on the geospatial data from Camila' as description
 );


-- create another view for cherry_creek_trail
CREATE OR REPLACE VIEW DENVER_AREA_TRAILS_2 AS
    SELECT TRAIL_NAME AS FEATURE_NAME
            , '{"coordinates":['||listagg('['||lng||','||lat||']',',')||'],"type":"LineString"}' AS GEOMETRY
            , ST_LENGTH(TO_GEOGRAPHY(GEOMETRY)) AS TRAIL_LENGTH
    FROM CHERRY_CREEK_TRAIL
    GROUP BY TRAIL_NAME;

SELECT *
FROM DENVER_AREA_TRAILS_2;


-- union all to merge all
CREATE OR REPLACE VIEW UNION_ALL AS
    SELECT FEATURE_NAME
            , GEOMETRY
            , TRAIL_LENGTH
    FROM DENVER_AREA_TRAILS
    UNION ALL
    SELECT FEATURE_NAME 
            , GEOMETRY
            , TRAIL_LENGTH
    FROM DENVER_AREA_TRAILS_2;

-- get min max x y values from geometry
CREATE OR REPLACE VIEW TRAILS_AND_BOUNDARIES AS
    SELECT TO_GEOGRAPHY(GEOMETRY) AS MY_LINESTRING
            , ST_XMIN(MY_LINESTRING) AS MIN_EASTWEST
            , ST_XMAX(MY_LINESTRING) AS MAX_EASTWEST
            , ST_YMIN(MY_LINESTRING) AS MIN_NORTHSOUTH
            , ST_YMAX(MY_LINESTRING) AS MAX_NORTHSOUTH
            , TRAIL_LENGTH
    FROM UNION_ALL;

    
SELECT 'POLYGON((' ||
    MIN(MIN_EASTWEST) || ' ' || MAX(MAX_NORTHSOUTH) || ',' ||
    MAX(MAX_EASTWEST) || ' ' || MAX(MAX_NORTHSOUTH) || ',' ||
    MAX(MAX_EASTWEST) || ' ' || MIN(MIN_NORTHSOUTH) || ',' ||
    MIN(MIN_EASTWEST) || ' ' || MIN(MIN_NORTHSOUTH) || '))' AS MY_POLYGON
FROM TRAILS_AND_BOUNDARIES;
    

-- grader
select GRADER(step, (actual = expected), actual, expected, description) as graded_results from
(
 SELECT
  'DLKW07' as step
   ,( select round(max(max_northsouth))
      from MELS_SMOOTHIE_CHALLENGE_DB.TRAILS.TRAILS_AND_BOUNDARIES)
      as actual
 ,40 as expected
 ,'Trails Northern Extent' as description
 ); 



-- ################## SONRA DENVER DATA ####################
-- Melanie's Location into a 2 Variables (mc for melanies cafe)
set mc_lat='-104.97300245114094';
set mc_lng='39.76471253574085';

--Confluence Park into a Variable (loc for location)
set loc_lat='-105.00840763333615'; 
set loc_lng='39.754141917497826';

--Test your variables to see if they work with the Makepoint function
select st_makepoint($mc_lat,$mc_lng) as melanies_cafe_point;
select st_makepoint($loc_lat,$loc_lng) as confluent_park_point;

--use the variables to calculate the distance from 
--Melanie's Cafe to Confluent Park
select st_distance(
        st_makepoint($mc_lat,$mc_lng)
        ,st_makepoint($loc_lat,$loc_lng)
        ) as mc_to_cp;


-- UDF
CREATE OR REPLACE FUNCTION DISTANCE_TO_MC(LAT_AND_LNG GEOGRAPHY)
    RETURNS FLOAT
    AS
    $$
        ST_DISTANCE(
            ST_MAKEPOINT('-104.97300245114094', '39.76471253574085')
            , LAT_AND_LNG
        )
    $$
    ;

-- SEARCH FROM SONRA'S DATA
CREATE OR REPLACE VIEW COMPETITION AS
    SELECT *
    FROM SONRA_DENVER_CO_USA_FREE.DENVER.V_OSM_DEN_AMENITY_SUSTENANCE
    WHERE (AMENITY IN ('fast_food','cafe','restaurant','juice_bar'))
        AND (NAME LIKE '%jamba%' OR NAME LIKE '%juice%' OR NAME LIKE '%superfruit%')
        OR (CUISINE LIKE '%smoothie%' OR CUISINE LIKE '%juice%');

SELECT NAME
        , CUISINE
        , DISTANCE_TO_MC(COORDINATES) AS DISTANCE_FROM_MELANIES
        , *
FROM COMPETITION
ORDER BY DISTANCE_FROM_MELANIES;


-- ################### VEHICLES DATA ####################
CREATE OR REPLACE VIEW DENVER_BIKE_SHOPS AS
    SELECT DISTANCE_TO_MC(COORDINATES) AS distance_to_melanies
            , *
    FROM SONRA_DENVER_CO_USA_FREE.DENVER.V_OSM_DEN_SHOP
    WHERE SHOP IN ('bicycle')
        OR NAME LIKE '%Cycles%' OR NAME LIKE '%Bike%';

SELECT NAME
        , distance_to_melanies
FROM DENVER_BIKE_SHOPS
ORDER BY distance_to_melanies;


-- grader
select GRADER(step, (actual = expected), actual, expected, description) as graded_results from
(
  SELECT
  'DLKW08' as step
  ,( select truncate(distance_to_melanies)
      from mels_smoothie_challenge_db.locations.denver_bike_shops
      where name like '%Mojo%') as actual
  ,14084 as expected
  ,'Bike Shop View Distance Calc works' as description
 ); 



-- ############ EXTERNAL TABLES ON STAGE ##############
ALTER VIEW TRAILS.CHERRY_CREEK_TRAIL
RENAME TO TRAILS.V_CHERRY_CREEK_TRAIL;

CREATE OR REPLACE EXTERNAL TABLE T_CHERRY_CREEK_TRAIL(
    POINT_ID NUMBER AS ($1:sequence_1::NUMBER)
    , TRAIL_NAME VARCHAR(50) AS ($1:trail_name::VARCHAR)
    , LNG NUMBER(11,8) AS ($1:latitude::NUMBER(11,8))
    , LAT NUMBER(11,8) AS ($1:longitude::NUMBER(11,8))
    , COORD_PAIR VARCHAR(50) AS (LNG::VARCHAR|| ' ' || LAT::VARCHAR)
)
LOCATION = @TRAILS_PARQUET
AUTO_REFRESH = TRUE
FILE_FORMAT = FF_PARQUET;

SELECT *
FROM T_CHERRY_CREEK_TRAIL;

-- GET_DDL
SELECT GET_DDL('VIEW', 'TRAILS.V_CHERRY_CREEK_TRAIL');


-- ############# MATERIALIZED VIEW ON TOP OF EXTERNAL TABLE ###########
create or replace secure materialized view  SMV_CHERRY_CREEK_TRAIL AS
    SELECT POINT_ID
            , TRAIL_NAME
            , LNG
            , LAT
            , COORD_PAIR
    FROM T_CHERRY_CREEK_TRAIL
;

SELECT *
FROM SMV_CHERRY_CREEK_TRAIL;


-- grader
select GRADER(step, (actual = expected), actual, expected, description) as graded_results from
(
  SELECT
  'DLKW09' as step
  ,( select row_count
     from mels_smoothie_challenge_db.information_schema.tables
     where table_schema = 'TRAILS'
    and table_name = 'SMV_CHERRY_CREEK_TRAIL')   
   as actual
  ,3526 as expected
  ,'Secure Materialized View Created' as description
 ); 

